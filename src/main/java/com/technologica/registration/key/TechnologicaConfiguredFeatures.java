package com.technologica.registration.key;

import java.util.List;

import com.technologica.api.tlregen.registration.MasterKeyCreator;
import com.technologica.api.tlregen.resourcegen.util.DynamicRegistryObject;
import com.technologica.registration.deferred.TechnologicaBlocks;
import com.technologica.registration.deferred.TechnologicaFeatures;
import com.technologica.resourcegen.data.worldgen.configuredfeature.TLWorldgenConfiguredFeatures;
import com.technologica.world.level.levelgen.feature.foliageplacers.ConicalFoliagePlacer;
import com.technologica.world.level.levelgen.feature.foliageplacers.DishFoliagePlacer;
import com.technologica.world.level.levelgen.feature.foliageplacers.PalmFoliagePlacer;
import com.technologica.world.level.levelgen.feature.foliageplacers.RedwoodFoliagePlacer;
import com.technologica.world.level.levelgen.feature.foliageplacers.TeardropFoliagePlacer;
import com.technologica.world.level.levelgen.feature.trunkplacers.HugeTrunkPlacer;

import net.minecraft.core.Holder;
import net.minecraft.data.worldgen.features.FeatureUtils;
import net.minecraft.tags.BlockTags;
import net.minecraft.util.valueproviders.ConstantInt;
import net.minecraft.util.valueproviders.UniformInt;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.CropBlock;
import net.minecraft.world.level.block.SweetBerryBushBlock;
import net.minecraft.world.level.levelgen.GeodeBlockSettings;
import net.minecraft.world.level.levelgen.GeodeCrackSettings;
import net.minecraft.world.level.levelgen.GeodeLayerSettings;
import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
import net.minecraft.world.level.levelgen.feature.Feature;
import net.minecraft.world.level.levelgen.feature.LakeFeature;
import net.minecraft.world.level.levelgen.feature.WeightedPlacedFeature;
import net.minecraft.world.level.levelgen.feature.configurations.BlockStateConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.ColumnFeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.GeodeConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.ProbabilityFeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.RandomFeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.ReplaceSphereConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.SimpleBlockConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration;
import net.minecraft.world.level.levelgen.feature.featuresize.TwoLayersFeatureSize;
import net.minecraft.world.level.levelgen.feature.foliageplacers.AcaciaFoliagePlacer;
import net.minecraft.world.level.levelgen.feature.foliageplacers.BlobFoliagePlacer;
import net.minecraft.world.level.levelgen.feature.foliageplacers.MegaPineFoliagePlacer;
import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
import net.minecraft.world.level.levelgen.feature.trunkplacers.StraightTrunkPlacer;
import net.minecraft.world.level.levelgen.placement.PlacedFeature;
import net.minecraft.world.level.levelgen.structure.templatesystem.RuleTest;
import net.minecraft.world.level.levelgen.structure.templatesystem.TagMatchTest;

/**
 * <p>
 * This class contains Resource Keys for Configured Features.
 * The corresponding Configured Features are created in json format during Data Generation in {@link TLWorldgenConfiguredFeatures}.
 * </p>
 * 
 * @tl.status GREEN
 */
@SuppressWarnings("deprecation")
public final class TechnologicaConfiguredFeatures extends MasterKeyCreator {

	public static void bootstrap() {
	};

	static RuleTest ruletest1 = new TagMatchTest(BlockTags.STONE_ORE_REPLACEABLES);
	static RuleTest ruletest2 = new TagMatchTest(BlockTags.DEEPSLATE_ORE_REPLACEABLES);

	static List<OreConfiguration.TargetBlockState> ORE_SPODUMENE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.SPODUMENE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_SPODUMENE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_BORAX_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.BORAX_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_BORAX_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_MAGNESITE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.MAGNESITE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_MAGNESITE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_BAUXITE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.BAUXITE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_BAUXITE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_APATITE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.APATITE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_APATITE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_PHOSPHORITE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.PHOSPHORITE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_PHOSPHORITE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_GADOLINITE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.GADOLINITE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_GADOLINITE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_ILMENITE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.ILMENITE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_ILMENITE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_PATRONITE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.PATRONITE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_PATRONITE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_CHROMITE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.CHROMITE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_CHROMITE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_PYROLUSITE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.PYROLUSITE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_PYROLUSITE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_COBALTITE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.COBALTITE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_COBALTITE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_GARNIERITE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.GARNIERITE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_GARNIERITE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_ARSENOPYRITE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.ARSENOPYRITE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_ARSENOPYRITE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_CROOKESITE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.CROOKESITE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_CROOKESITE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_LEPIDOLITE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.LEPIDOLITE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_LEPIDOLITE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_BASTNAESITE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.BASTNAESITE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_BASTNAESITE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_TANTALITE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.TANTALITE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_TANTALITE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_MOLYBDENITE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.MOLYBDENITE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_MOLYBDENITE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_PENTLANDITE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.PENTLANDITE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_PENTLANDITE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_ARGENTITE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.ARGENTITE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_ARGENTITE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_GALENA_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.GALENA_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_GALENA_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_SYLVANITE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.SYLVANITE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_SYLVANITE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_CASSITERITE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.CASSITERITE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_CASSITERITE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_WOLFRAMITE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.WOLFRAMITE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_WOLFRAMITE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_OSMIRIDIUM_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.OSMIRIDIUM_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_OSMIRIDIUM_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_PLATINUM_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.PLATINUM_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_PLATINUM_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_CINNABAR_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.CINNABAR_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_CINNABAR_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_THORIANITE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.THORIANITE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_THORIANITE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_URANINITE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.URANINITE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_URANINITE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_EMERALD_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, Blocks.EMERALD_ORE.defaultBlockState()), OreConfiguration.target(ruletest2, Blocks.DEEPSLATE_EMERALD_ORE.defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_RUBY_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.RUBY_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_RUBY_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_SAPPHIRE_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.SAPPHIRE_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_SAPPHIRE_ORE.get().defaultBlockState()));
	static List<OreConfiguration.TargetBlockState> ORE_TOPAZ_TARGET_LIST = List.of(OreConfiguration.target(ruletest1, TechnologicaBlocks.TOPAZ_ORE.get().defaultBlockState()), OreConfiguration.target(ruletest2, TechnologicaBlocks.DEEPSLATE_TOPAZ_ORE.get().defaultBlockState()));

	// static Holder<PlacedFeature> holder = Holder.Reference.createStandAlone(DynamicRegistryObject.ho2, TechnologicaPlacedFeatures.ZEBRAWOOD_CHECKED);
	// static Holder<PlacedFeature> holder1 = Holder.Reference.createStandAlone(DynamicRegistryObject.ho2, TechnologicaPlacedFeatures.EBONY_CHECKED);
	static Holder<PlacedFeature> holder2 = Holder.Reference.createStandAlone(DynamicRegistryObject.ho2, TechnologicaPlacedFeatures.KIWI_CHECKED);
	static Holder<PlacedFeature> holder3 = Holder.Reference.createStandAlone(DynamicRegistryObject.ho2, TechnologicaPlacedFeatures.RUBBER_CHECKED);
	static Holder<PlacedFeature> holder4 = Holder.Reference.createStandAlone(DynamicRegistryObject.ho2, TechnologicaPlacedFeatures.TEAK_CHECKED);
	static Holder<PlacedFeature> holder5 = Holder.Reference.createStandAlone(DynamicRegistryObject.ho2, TechnologicaPlacedFeatures.CHERRY_CHECKED);
	static Holder<PlacedFeature> holder6 = Holder.Reference.createStandAlone(DynamicRegistryObject.ho2, TechnologicaPlacedFeatures.PLUM_CHECKED);
	static Holder<PlacedFeature> holder7 = Holder.Reference.createStandAlone(DynamicRegistryObject.ho2, TechnologicaPlacedFeatures.CHESTNUT_CHECKED);
	static Holder<PlacedFeature> holder8 = Holder.Reference.createStandAlone(DynamicRegistryObject.ho2, TechnologicaPlacedFeatures.PEACH_CHECKED);
	static Holder<PlacedFeature> holder9 = Holder.Reference.createStandAlone(DynamicRegistryObject.ho2, TechnologicaPlacedFeatures.ASPEN_CHECKED);
	static Holder<PlacedFeature> holder10 = Holder.Reference.createStandAlone(DynamicRegistryObject.ho2, TechnologicaPlacedFeatures.COCONUT_CHECKED);
	static Holder<PlacedFeature> holder11 = Holder.Reference.createStandAlone(DynamicRegistryObject.ho2, TechnologicaPlacedFeatures.APRICOT_CHECKED);
	static Holder<PlacedFeature> holder12 = Holder.Reference.createStandAlone(DynamicRegistryObject.ho2, TechnologicaPlacedFeatures.PEAR_CHECKED);
	static Holder<PlacedFeature> holder13 = Holder.Reference.createStandAlone(DynamicRegistryObject.ho2, TechnologicaPlacedFeatures.MAPLE_CHECKED);
	static Holder<PlacedFeature> holder14 = Holder.Reference.createStandAlone(DynamicRegistryObject.ho2, TechnologicaPlacedFeatures.WALNUT_CHECKED);
	static Holder<PlacedFeature> holder15 = Holder.Reference.createStandAlone(DynamicRegistryObject.ho2, TechnologicaPlacedFeatures.ORANGE_CHECKED);

	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> BRINE_POOL_CONFIGURED = configuredFeature("brine_pool", () -> new ConfiguredFeature<>(TechnologicaFeatures.BRINE_POOL.get(), new LakeFeature.Configuration(BlockStateProvider.simple(TechnologicaBlocks.BRINE.get().defaultBlockState()), BlockStateProvider.simple(TechnologicaBlocks.LITHIUM_CLAY.get().defaultBlockState()))));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> NATURAL_GAS_DEPOSIT_CONFIGURED = configuredFeature("natural_gas_deposit", () -> new ConfiguredFeature<>(TechnologicaFeatures.NATURAL_GAS_DEPOSIT.get(), new GeodeConfiguration(new GeodeBlockSettings(BlockStateProvider.simple(TechnologicaBlocks.NATURAL_GAS.get()), BlockStateProvider.simple(TechnologicaBlocks.NATURAL_GAS.get()), BlockStateProvider.simple(TechnologicaBlocks.NATURAL_GAS.get()), BlockStateProvider.simple(TechnologicaBlocks.NATURAL_GAS.get()), BlockStateProvider.simple(TechnologicaBlocks.NATURAL_GAS.get()), List.of(Blocks.SMALL_AMETHYST_BUD.defaultBlockState(), Blocks.MEDIUM_AMETHYST_BUD.defaultBlockState(), Blocks.LARGE_AMETHYST_BUD.defaultBlockState(), Blocks.AMETHYST_CLUSTER.defaultBlockState()), BlockTags.FEATURES_CANNOT_REPLACE, BlockTags.GEODE_INVALID_BLOCKS), new GeodeLayerSettings(1.7D, 2.2D, 3.2D, 4.2D), new GeodeCrackSettings(0.95D, 2.0D, 2), 0.35D, 0.083D, true, UniformInt.of(4, 6), UniformInt.of(3, 4), UniformInt.of(1, 2), -16, 16, 0.05D, 1)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> OASIS_CONFIGURED = configuredFeature("oasis", () -> new ConfiguredFeature<>(TechnologicaFeatures.OASIS.get(), new BlockStateConfiguration(Blocks.WATER.defaultBlockState())));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> OIL_WELL_CONFIGURED = configuredFeature("oil_well", () -> new ConfiguredFeature<>(TechnologicaFeatures.OIL_WELL.get(), new GeodeConfiguration(new GeodeBlockSettings(BlockStateProvider.simple(TechnologicaBlocks.OIL.get()), BlockStateProvider.simple(TechnologicaBlocks.OIL.get()), BlockStateProvider.simple(TechnologicaBlocks.OIL.get()), BlockStateProvider.simple(TechnologicaBlocks.OIL.get()), BlockStateProvider.simple(TechnologicaBlocks.OIL.get()), List.of(Blocks.SMALL_AMETHYST_BUD.defaultBlockState(), Blocks.MEDIUM_AMETHYST_BUD.defaultBlockState(), Blocks.LARGE_AMETHYST_BUD.defaultBlockState(), Blocks.AMETHYST_CLUSTER.defaultBlockState()), BlockTags.FEATURES_CANNOT_REPLACE, BlockTags.GEODE_INVALID_BLOCKS), new GeodeLayerSettings(1.7D, 2.2D, 3.2D, 4.2D), new GeodeCrackSettings(0.95D, 2.0D, 2), 0.35D, 0.083D, true, UniformInt.of(4, 6), UniformInt.of(3, 4), UniformInt.of(1, 2), -16, 16, 0.05D, 1)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_SPODUMENE = configuredFeature("ore_spodumene", () -> new ConfiguredFeature<>(TechnologicaFeatures.POLLUCITE_DECORATED_ORE.get(), new OreConfiguration(ORE_SPODUMENE_TARGET_LIST, 8)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_BORAX = configuredFeature("ore_borax", () -> new ConfiguredFeature<>(TechnologicaFeatures.ULEXITE_DECORATED_ORE.get(), new OreConfiguration(ORE_BORAX_TARGET_LIST, 8)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_MAGNESITE = configuredFeature("ore_magnesite", () -> new ConfiguredFeature<>(TechnologicaFeatures.DOLOMITE_DECORATED_ORE.get(), new OreConfiguration(ORE_MAGNESITE_TARGET_LIST, 8)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_BAUXITE = configuredFeature("ore_bauxite", () -> new ConfiguredFeature<>(Feature.ORE, new OreConfiguration(ORE_BAUXITE_TARGET_LIST, 8)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_APATITE = configuredFeature("ore_apatite", () -> new ConfiguredFeature<>(TechnologicaFeatures.FLUORITE_DECORATED_ORE.get(), new OreConfiguration(ORE_APATITE_TARGET_LIST, 8)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_PHOSPHORITE = configuredFeature("ore_phosphorite", () -> new ConfiguredFeature<>(TechnologicaFeatures.CELESTINE_DECORATED_ORE.get(), new OreConfiguration(ORE_PHOSPHORITE_TARGET_LIST, 8)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_GADOLINITE = configuredFeature("ore_gadolinite", () -> new ConfiguredFeature<>(TechnologicaFeatures.XENOTIME_DECORATED_ORE.get(), new OreConfiguration(ORE_GADOLINITE_TARGET_LIST, 4)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_ILMENITE = configuredFeature("ore_ilmenite", () -> new ConfiguredFeature<>(TechnologicaFeatures.RUTILE_DECORATED_ORE.get(), new OreConfiguration(ORE_ILMENITE_TARGET_LIST, 8)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_PATRONITE = configuredFeature("ore_patronite", () -> new ConfiguredFeature<>(TechnologicaFeatures.VANADANITE_DECORATED_ORE.get(), new OreConfiguration(ORE_PATRONITE_TARGET_LIST, 8)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_CHROMITE = configuredFeature("ore_chromite", () -> new ConfiguredFeature<>(TechnologicaFeatures.ZIRCON_DECORATED_ORE.get(), new OreConfiguration(ORE_CHROMITE_TARGET_LIST, 8)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_PYROLUSITE = configuredFeature("ore_pyrolusite", () -> new ConfiguredFeature<>(Feature.ORE, new OreConfiguration(ORE_PYROLUSITE_TARGET_LIST, 8)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_COBALTITE = configuredFeature("ore_cobaltite", () -> new ConfiguredFeature<>(Feature.ORE, new OreConfiguration(ORE_COBALTITE_TARGET_LIST, 8)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_GARNIERITE = configuredFeature("ore_garnierite", () -> new ConfiguredFeature<>(Feature.ORE, new OreConfiguration(ORE_GARNIERITE_TARGET_LIST, 8)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_ARSENOPYRITE = configuredFeature("ore_arsenopyrite", () -> new ConfiguredFeature<>(TechnologicaFeatures.SPHALERITE_DECORATED_ORE.get(), new OreConfiguration(ORE_ARSENOPYRITE_TARGET_LIST, 8)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_CROOKESITE = configuredFeature("ore_crookesite", () -> new ConfiguredFeature<>(TechnologicaFeatures.HUTCHINSONITE_DECORATED_ORE.get(), new OreConfiguration(ORE_CROOKESITE_TARGET_LIST, 8)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_LEPIDOLITE = configuredFeature("ore_lepidolite", () -> new ConfiguredFeature<>(TechnologicaFeatures.STRONTIANITE_DECORATED_ORE.get(), new OreConfiguration(ORE_LEPIDOLITE_TARGET_LIST, 8)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_BASTNAESITE = configuredFeature("ore_bastnaesite", () -> new ConfiguredFeature<>(TechnologicaFeatures.MONAZITE_DECORATED_ORE.get(), new OreConfiguration(ORE_BASTNAESITE_TARGET_LIST, 4)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_TANTALITE = configuredFeature("ore_tantalite", () -> new ConfiguredFeature<>(TechnologicaFeatures.COLUMBITE_DECORATED_ORE.get(), new OreConfiguration(ORE_TANTALITE_TARGET_LIST, 4)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_MOLYBDENITE = configuredFeature("ore_molybdenite", () -> new ConfiguredFeature<>(TechnologicaFeatures.WULFENITE_DECORATED_ORE.get(), new OreConfiguration(ORE_MOLYBDENITE_TARGET_LIST, 8)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_PENTLANDITE = configuredFeature("ore_pentlandite", () -> new ConfiguredFeature<>(Feature.ORE, new OreConfiguration(ORE_PENTLANDITE_TARGET_LIST, 8)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_ARGENTITE = configuredFeature("ore_argentite", () -> new ConfiguredFeature<>(Feature.ORE, new OreConfiguration(ORE_ARGENTITE_TARGET_LIST, 8)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_GALENA = configuredFeature("ore_galena", () -> new ConfiguredFeature<>(TechnologicaFeatures.BARYTE_DECORATED_ORE.get(), new OreConfiguration(ORE_GALENA_TARGET_LIST, 8)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_SYLVANITE = configuredFeature("ore_sylvanite", () -> new ConfiguredFeature<>(TechnologicaFeatures.TELLURITE_DECORATED_ORE.get(), new OreConfiguration(ORE_SYLVANITE_TARGET_LIST, 4)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_CASSITERITE = configuredFeature("ore_cassiterite", () -> new ConfiguredFeature<>(TechnologicaFeatures.BISMITHUNITE_DECORATED_ORE.get(), new OreConfiguration(ORE_CASSITERITE_TARGET_LIST, 8)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_WOLFRAMITE = configuredFeature("ore_wolframite", () -> new ConfiguredFeature<>(TechnologicaFeatures.SCHEELITE_DECORATED_ORE.get(), new OreConfiguration(ORE_WOLFRAMITE_TARGET_LIST, 8)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_OSMIRIDIUM = configuredFeature("ore_osmiridium", () -> new ConfiguredFeature<>(Feature.ORE, new OreConfiguration(ORE_OSMIRIDIUM_TARGET_LIST, 4)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_PLATINUM = configuredFeature("ore_platinum", () -> new ConfiguredFeature<>(Feature.ORE, new OreConfiguration(ORE_PLATINUM_TARGET_LIST, 4)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_CINNABAR = configuredFeature("ore_cinnabar", () -> new ConfiguredFeature<>(TechnologicaFeatures.STIBNITE_DECORATED_ORE.get(), new OreConfiguration(ORE_CINNABAR_TARGET_LIST, 8)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_THORIANITE = configuredFeature("ore_thorianite", () -> new ConfiguredFeature<>(TechnologicaFeatures.AUTUNITE_DECORATED_ORE.get(), new OreConfiguration(ORE_THORIANITE_TARGET_LIST, 8)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_URANINITE = configuredFeature("ore_uraninite", () -> new ConfiguredFeature<>(TechnologicaFeatures.AUTUNITE_DECORATED_ORE.get(), new OreConfiguration(ORE_URANINITE_TARGET_LIST, 8)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_EMERALD = configuredFeature("ore_emerald", () -> new ConfiguredFeature<>(TechnologicaFeatures.AQUAMARINE_DECORATED_ORE.get(), new OreConfiguration(ORE_EMERALD_TARGET_LIST, 3)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_RUBY = configuredFeature("ore_ruby", () -> new ConfiguredFeature<>(Feature.ORE, new OreConfiguration(ORE_RUBY_TARGET_LIST, 3)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_SAPPHIRE = configuredFeature("ore_sapphire", () -> new ConfiguredFeature<>(Feature.ORE, new OreConfiguration(ORE_SAPPHIRE_TARGET_LIST, 3)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORE_TOPAZ = configuredFeature("ore_topaz", () -> new ConfiguredFeature<>(Feature.ORE, new OreConfiguration(ORE_TOPAZ_TARGET_LIST, 3)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> APRICOT = configuredFeature("apricot", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.APRICOT_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 1, 0), BlockStateProvider.simple(TechnologicaBlocks.APRICOT_LEAVES.get().defaultBlockState()), new ConicalFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ASPEN = configuredFeature("aspen", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.ASPEN_LOG.get().defaultBlockState()), new StraightTrunkPlacer(6, 2, 0), BlockStateProvider.simple(TechnologicaBlocks.ASPEN_LEAVES.get().defaultBlockState()), new TeardropFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 6), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> AVOCADO = configuredFeature("avocado", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.AVOCADO_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 1, 0), BlockStateProvider.simple(TechnologicaBlocks.AVOCADO_LEAVES.get().defaultBlockState()), new ConicalFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> BANANA = configuredFeature("banana", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.BANANA_LOG.get().defaultBlockState()), new StraightTrunkPlacer(5, 2, 0), BlockStateProvider.simple(TechnologicaBlocks.BANANA_LEAVES.get().defaultBlockState()), new PalmFoliagePlacer(ConstantInt.of(4), ConstantInt.of(1)), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> CHERRY = configuredFeature("cherry", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.CHERRY_LOG.get().defaultBlockState()), new StraightTrunkPlacer(5, 2, 0), BlockStateProvider.simple(TechnologicaBlocks.CHERRY_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> CHESTNUT = configuredFeature("chestnut", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.CHESTNUT_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 1, 0), BlockStateProvider.simple(TechnologicaBlocks.CHESTNUT_LEAVES.get().defaultBlockState()), new ConicalFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> CINNAMON = configuredFeature("cinnamon", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.CINNAMON_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 1, 0), BlockStateProvider.simple(TechnologicaBlocks.CINNAMON_LEAVES.get().defaultBlockState()), new ConicalFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> COCONUT = configuredFeature("coconut", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.COCONUT_LOG.get().defaultBlockState()), new StraightTrunkPlacer(7, 5, 0), BlockStateProvider.simple(TechnologicaBlocks.COCONUT_LEAVES.get().defaultBlockState()), new PalmFoliagePlacer(ConstantInt.of(5), ConstantInt.of(1)), new TwoLayersFeatureSize(0, 0, 0)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> EBONY = configuredFeature("ebony", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.EBONY_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 1, 0), BlockStateProvider.simple(TechnologicaBlocks.EBONY_LEAVES.get().defaultBlockState()), new ConicalFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> KIWI = configuredFeature("kiwi", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.KIWI_LOG.get().defaultBlockState()), new StraightTrunkPlacer(3, 1, 0), BlockStateProvider.simple(TechnologicaBlocks.KIWI_LEAVES.get().defaultBlockState()), new AcaciaFoliagePlacer(ConstantInt.of(3), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> LEMON = configuredFeature("lemon", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.LEMON_LOG.get().defaultBlockState()), new StraightTrunkPlacer(2, 2, 0), BlockStateProvider.simple(TechnologicaBlocks.LEMON_LEAVES.get().defaultBlockState()), new ConicalFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> LIME = configuredFeature("lime", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.LIME_LOG.get().defaultBlockState()), new StraightTrunkPlacer(2, 2, 0), BlockStateProvider.simple(TechnologicaBlocks.LIME_LEAVES.get().defaultBlockState()), new ConicalFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> MAHOGANY = configuredFeature("mahogany", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.MAHOGANY_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 1, 0), BlockStateProvider.simple(TechnologicaBlocks.MAHOGANY_LEAVES.get().defaultBlockState()), new ConicalFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> MAPLE = configuredFeature("maple", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.MAPLE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 1, 0), BlockStateProvider.simple(TechnologicaBlocks.MAPLE_LEAVES.get().defaultBlockState()), new ConicalFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> OLIVE = configuredFeature("olive", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.OLIVE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 1, 0), BlockStateProvider.simple(TechnologicaBlocks.OLIVE_LEAVES.get().defaultBlockState()), new ConicalFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ORANGE = configuredFeature("orange", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.ORANGE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 1, 0), BlockStateProvider.simple(TechnologicaBlocks.ORANGE_LEAVES.get().defaultBlockState()), new ConicalFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> PEACH = configuredFeature("peach", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.PEACH_LOG.get().defaultBlockState()), new StraightTrunkPlacer(5, 2, 0), BlockStateProvider.simple(TechnologicaBlocks.PEACH_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> PEAR = configuredFeature("pear", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.PEAR_LOG.get().defaultBlockState()), new StraightTrunkPlacer(5, 2, 0), BlockStateProvider.simple(TechnologicaBlocks.PEAR_LEAVES.get().defaultBlockState()), new TeardropFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 6), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> PLUM = configuredFeature("plum", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.PLUM_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 1, 0), BlockStateProvider.simple(TechnologicaBlocks.PLUM_LEAVES.get().defaultBlockState()), new ConicalFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> REDWOOD = configuredFeature("redwood", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.REDWOOD_LOG.get().defaultBlockState()), new HugeTrunkPlacer(18, 5, 19), BlockStateProvider.simple(TechnologicaBlocks.REDWOOD_LEAVES.get().defaultBlockState()), new RedwoodFoliagePlacer(ConstantInt.of(4), ConstantInt.of(7)), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ROSEWOOD = configuredFeature("rosewood", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.ROSEWOOD_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 1, 0), BlockStateProvider.simple(TechnologicaBlocks.ROSEWOOD_LEAVES.get().defaultBlockState()), new ConicalFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> RUBBER = configuredFeature("rubber", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.RUBBER_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 1, 0), BlockStateProvider.simple(TechnologicaBlocks.RUBBER_LEAVES.get().defaultBlockState()), new ConicalFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> TEAK = configuredFeature("teak", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.TEAK_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 1, 0), BlockStateProvider.simple(TechnologicaBlocks.TEAK_LEAVES.get().defaultBlockState()), new ConicalFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> WALNUT = configuredFeature("walnut", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.WALNUT_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 1, 0), BlockStateProvider.simple(TechnologicaBlocks.WALNUT_LEAVES.get().defaultBlockState()), new ConicalFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ZEBRAWOOD = configuredFeature("zebrawood", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.ZEBRAWOOD_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 1, 0), BlockStateProvider.simple(TechnologicaBlocks.ZEBRAWOOD_LEAVES.get().defaultBlockState()), new ConicalFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> ANCIENT_AMBROSIA = configuredFeature("ancient_ambrosia", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.FRUITFUL_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 1, 0), BlockStateProvider.simple(TechnologicaBlocks.FRUITFUL_LEAVES.get().defaultBlockState()), new ConicalFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new TwoLayersFeatureSize(0, 0, 0)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> BENEVOLENT_APOTHECARY = configuredFeature("benevolent_apothecary", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.BENEVOLENT_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 1, 0), BlockStateProvider.simple(TechnologicaBlocks.BENEVOLENT_LEAVES.get().defaultBlockState()), new ConicalFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new TwoLayersFeatureSize(0, 0, 0)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> CRYOGENIC_SPIRE = configuredFeature("cryogenic_spire", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.FROSTBITTEN_LOG.get().defaultBlockState()), new StraightTrunkPlacer(10, 10, 0), BlockStateProvider.simple(TechnologicaBlocks.FROSTBITTEN_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(5), UniformInt.of(4, 13)), new TwoLayersFeatureSize(0, 0, 0)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> MALEVOLENT_APOTHECARY = configuredFeature("malevolent_apothecary", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.MALEVOLENT_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 1, 0), BlockStateProvider.simple(TechnologicaBlocks.MALEVOLENT_LEAVES.get().defaultBlockState()), new ConicalFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new TwoLayersFeatureSize(0, 0, 0)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> NECROTIC = configuredFeature("necrotic", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.NECROTIC_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 1, 0), BlockStateProvider.simple(TechnologicaBlocks.CURSED_LEAVES.get().defaultBlockState()), new ConicalFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new TwoLayersFeatureSize(0, 0, 0)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> SERENDIPITOUS_APOTHECARY = configuredFeature("serendipitous_apothecary", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.ALCHEMICAL_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 1, 0), BlockStateProvider.simple(TechnologicaBlocks.ALCHEMICAL_LEAVES.get().defaultBlockState()), new ConicalFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new TwoLayersFeatureSize(0, 0, 0)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> THUNDEROUS_CONDUCTOR = configuredFeature("thunderous_conductor", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.CONDUCTIVE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(10, 10, 0), BlockStateProvider.simple(TechnologicaBlocks.CONDUCTIVE_LEAVES.get().defaultBlockState()), new DishFoliagePlacer(ConstantInt.of(9), ConstantInt.of(0), 3), new TwoLayersFeatureSize(0, 0, 0)).ignoreVines().build()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> TOWERING_INFERNO = configuredFeature("towering_inferno", () -> new ConfiguredFeature<>(Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(TechnologicaBlocks.INFERNAL_LOG.get().defaultBlockState()), new StraightTrunkPlacer(10, 10, 0), BlockStateProvider.simple(Blocks.FIRE.defaultBlockState()), new ConicalFoliagePlacer(ConstantInt.of(9), ConstantInt.of(0)), new TwoLayersFeatureSize(0, 0, 0)).ignoreVines().build()));
	// public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> TREES_MODIFIED_JUNGLE = configuredFeature("trees_modified_savanna", () -> new ConfiguredFeature<>(Feature.RANDOM_SELECTOR, new RandomFeatureConfiguration(List.of(new WeightedPlacedFeature(TechnologicaPlacedFeatures.ZEBRAWOOD_CHECKED.holder2(), 0.8F)), TechnologicaPlacedFeatures.ZEBRAWOOD_CHECKED.holder2())));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> TREES_MODIFIED_SAVANNA = configuredFeature("trees_modified_jungle", () -> new ConfiguredFeature<>(Feature.RANDOM_SELECTOR, new RandomFeatureConfiguration(List.of(new WeightedPlacedFeature(TechnologicaPlacedFeatures.EBONY_CHECKED.holder2(), 0.33F), new WeightedPlacedFeature(holder2, 0.33F)), holder3)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> TREES_MODIFIED_JUNGLE_EDGE = configuredFeature("trees_modified_jungle_edge", () -> new ConfiguredFeature<>(Feature.RANDOM_SELECTOR, new RandomFeatureConfiguration(List.of(new WeightedPlacedFeature(holder4, 0.8F)), holder4)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> TREES_MODIFIED_BAMBOO_JUNGLE = configuredFeature("trees_modified_bamboo_jungle", () -> new ConfiguredFeature<>(Feature.RANDOM_SELECTOR, new RandomFeatureConfiguration(List.of(new WeightedPlacedFeature(holder5, 0.5F)), holder6)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> TREES_MODIFIED_FOREST = configuredFeature("trees_modified_forest", () -> new ConfiguredFeature<>(Feature.RANDOM_SELECTOR, new RandomFeatureConfiguration(List.of(new WeightedPlacedFeature(holder7, 0.8F)), holder7)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> TREES_MODIFIED_BIRCH_FOREST = configuredFeature("trees_modified_birch_forest", () -> new ConfiguredFeature<>(Feature.RANDOM_SELECTOR, new RandomFeatureConfiguration(List.of(new WeightedPlacedFeature(holder8, 0.8F)), holder8)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> TREES_MODIFIED_WOODED_HILLS = configuredFeature("trees_modified_wooded_hills", () -> new ConfiguredFeature<>(Feature.RANDOM_SELECTOR, new RandomFeatureConfiguration(List.of(new WeightedPlacedFeature(holder9, 0.8F)), holder9)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> TREES_MODIFIED_BEACH = configuredFeature("trees_modified_beach", () -> new ConfiguredFeature<>(Feature.RANDOM_SELECTOR, new RandomFeatureConfiguration(List.of(new WeightedPlacedFeature(holder10, 0.8F)), holder10)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> TREES_MODIFIED_TAIGA = configuredFeature("trees_modified_taiga", () -> new ConfiguredFeature<>(Feature.RANDOM_SELECTOR, new RandomFeatureConfiguration(List.of(new WeightedPlacedFeature(holder11, 0.5F)), holder12)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> TREES_MODIFIED_SNOWY_TAIGA = configuredFeature("trees_modified_snowy_taiga", () -> new ConfiguredFeature<>(Feature.RANDOM_SELECTOR, new RandomFeatureConfiguration(List.of(new WeightedPlacedFeature(holder13, 0.5F)), holder14)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> TREES_MODIFIED_SWAMP = configuredFeature("trees_modified_swamp", () -> new ConfiguredFeature<>(Feature.RANDOM_SELECTOR, new RandomFeatureConfiguration(List.of(new WeightedPlacedFeature(holder15, 0.8F)), holder15)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> PATCH_BLACKBERRY_BUSH = configuredFeature("patch_blackberry_bush", () -> new ConfiguredFeature<>(Feature.RANDOM_PATCH, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(TechnologicaBlocks.BLACKBERRY_BUSH.get().defaultBlockState().setValue(SweetBerryBushBlock.AGE, Integer.valueOf(3)))), List.of(Blocks.GRASS_BLOCK))));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> PATCH_BLUEBERRY_BUSH = configuredFeature("patch_blueberry_bush", () -> new ConfiguredFeature<>(Feature.RANDOM_PATCH, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(TechnologicaBlocks.BLUEBERRY_BUSH.get().defaultBlockState().setValue(SweetBerryBushBlock.AGE, Integer.valueOf(3)))), List.of(Blocks.GRASS_BLOCK))));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> PATCH_RASPBERRY_BUSH = configuredFeature("patch_raspberry_bush", () -> new ConfiguredFeature<>(Feature.RANDOM_PATCH, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(TechnologicaBlocks.RASPBERRY_BUSH.get().defaultBlockState().setValue(SweetBerryBushBlock.AGE, Integer.valueOf(3)))), List.of(Blocks.GRASS_BLOCK))));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> PATCH_STRAWBERRY_BUSH = configuredFeature("patch_strawberry_bush", () -> new ConfiguredFeature<>(Feature.RANDOM_PATCH, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(TechnologicaBlocks.STRAWBERRY_BUSH.get().defaultBlockState().setValue(SweetBerryBushBlock.AGE, Integer.valueOf(3)))), List.of(Blocks.GRASS_BLOCK))));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> PATCH_COTTON_BUSH = configuredFeature("patch_cotton_bush", () -> new ConfiguredFeature<>(Feature.RANDOM_PATCH, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(TechnologicaBlocks.COTTON_BUSH.get().defaultBlockState().setValue(SweetBerryBushBlock.AGE, Integer.valueOf(3)))), List.of(Blocks.GRASS_BLOCK))));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> PATCH_PEPPERCORN_BUSH = configuredFeature("patch_peppercorn_bush", () -> new ConfiguredFeature<>(Feature.RANDOM_PATCH, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(TechnologicaBlocks.PEPPERCORNS.get().defaultBlockState().setValue(CropBlock.AGE, Integer.valueOf(3)))), List.of(Blocks.GRASS_BLOCK))));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> NAVAL_MINE = configuredFeature("naval_mine", () -> new ConfiguredFeature<>(TechnologicaFeatures.NAVAL_MINE.get(), new NoneFeatureConfiguration()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> DEEP_KELP = configuredFeature("deep_kelp", () -> new ConfiguredFeature<>(TechnologicaFeatures.DEEP_KELP.get(), new NoneFeatureConfiguration()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> DEEP_SEAGRASS = configuredFeature("deep_seagrass", () -> new ConfiguredFeature<>(TechnologicaFeatures.DEEP_SEAGRASS.get(), new ProbabilityFeatureConfiguration(0.8F)));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> DEEP_BASALT_PILLAR = configuredFeature("deep_basalt_pillar", () -> new ConfiguredFeature<>(TechnologicaFeatures.DEEP_BASALT_PILLAR.get(), new NoneFeatureConfiguration()));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> HYDROTHERMAL_VENT = configuredFeature("hydrothermal_vent", () -> new ConfiguredFeature<>(TechnologicaFeatures.HYDROTHERMAL_VENT.get(), new ColumnFeatureConfiguration(ConstantInt.of(1), UniformInt.of(1, 4))));
	public static final DynamicRegistryObject<ConfiguredFeature<?, ?>> DEEP_BASALT_BLOB = configuredFeature("deep_basalt_blob", () -> new ConfiguredFeature<>(Feature.REPLACE_BLOBS, new ReplaceSphereConfiguration(Blocks.STONE.defaultBlockState(), Blocks.BASALT.defaultBlockState(), UniformInt.of(3, 7))));
}